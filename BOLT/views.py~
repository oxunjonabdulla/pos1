import json

from django.contrib.auth.decorators import login_required
from django.core.paginator import Paginator
from django.db.models import Count
from django.db.models import Q
from django.http import JsonResponse
from django.shortcuts import get_object_or_404
from django.shortcuts import redirect
from django.shortcuts import render
from django.utils import timezone
from django.views.decorators.csrf import csrf_exempt

from product_app.models import Maxsulot, CartItems, Order, OrderItems, Kategoriya, Department
from settings_app.models import SiteSettings, AdminParol
from user_app.models import User


@login_required(login_url='login_page')
def warehouse_page(request):
    # Annotate each department with the count of its related categories
    departments = Department.objects.annotate(category_count=Count('kategoriya'))
    cart_items = CartItems.objects.filter(foydalanuvchi=request.user)

    # Filter the Warehouse department
    try:
        warehouse_department = Department.objects.get(name="Warehouse")
    except Department.DoesNotExist:
        return render(request, "user/error-404.html")  # Handle the case where the department doesn't exist

    department_id = warehouse_department.id
    category_id = request.GET.get('category_id')

    # Filter categories and products for the Warehouse department
    categories = Kategoriya.objects.filter(department_id=department_id).annotate(maxsulot_count=Count('maxsulot'))
    products = Maxsulot.objects.filter(kategoriya__in=categories)

    if category_id:
        categories = categories.filter(id=category_id)
        products = products.filter(kategoriya__id=category_id)

    # If the request is an AJAX request, return a JSON response
    if request.headers.get('x-requested-with') == 'XMLHttpRequest':
        return JsonResponse({
            'products': list(products.values('id', 'nomi', 'rasm', 'kategoriya__nomi')),
            'categories': list(categories.values('id', 'nomi', 'image', 'maxsulot_count')),
        })

    # Render the template for the Warehouse department
    return render(request, "user/pos-warehouse.html", {
        'departments': departments,
        'products': products,
        'cart_items': cart_items,
        'cart_items_count': cart_items.count(),
        'active_department': department_id,
        'active_category': int(category_id) if category_id else None,
        'categories': categories,
    })


@login_required(login_url='login_page')
def mechanic_page(request):
    # Annotate each department with the count of its related categories
    departments = Department.objects.annotate(category_count=Count('kategoriya'))
    cart_items = CartItems.objects.filter(foydalanuvchi=request.user)

    # Get the Mechanic department
    try:
        mechanic_department = Department.objects.get(name="Mechanic")
    except Department.DoesNotExist:
        return render(request, "user/error-404.html")  # Handle the case where the department doesn't exist

    department_id = mechanic_department.id
    categories = Kategoriya.objects.filter(department_id=department_id).annotate(maxsulot_count=Count('maxsulot'))
    products = Maxsulot.objects.filter(kategoriya__in=categories)

    return render(request, "user/pos-mechanic.html", {
        'departments': departments,
        'products': products,
        'cart_items': cart_items,
        'cart_items_count': cart_items.count(),
        'active_department': department_id,
        'categories': categories,
    })



@login_required(login_url='login_page')
def filter_products(request):
    category_id = request.GET.get('category_id')
    if category_id:
        products = Maxsulot.objects.filter(kategoriya_id=category_id)
        product_list = [
            {
                "id": product.id,
                "name": product.nomi,
                "image": product.rasm.url,
                "category": product.kategoriya.nomi,
            }
            for product in products
        ]
        return JsonResponse({
            'products': list(products.values('id', 'nomi', 'rasm', 'kategoriya__nomi')),
            'categories': list(categories.values('id', 'nomi', 'image', 'maxsulot_count')),
        })

    return JsonResponse({"error": "No category ID provided"}, status=400)
def bad_request_view(request, exception):
    return render(request, 'user/error-404.html')


@login_required(login_url='login_page')
def get_cart_items(request):
    cart_items = CartItems.objects.filter(foydalanuvchi=request.user)
    data = {
        "cart_items": [
            {
                "id": item.id,
                "maxsulot_nomi": item.maxsulot.nomi,
                "maxsulot_rasm": item.maxsulot.rasm.url,
                "soni": item.soni
            }
            for item in cart_items
        ]
    }
    return JsonResponse(data)


@login_required(login_url='login_page')
def home_page(request):
    site_settings = SiteSettings.objects.last()
    today = timezone.now().date()

    if request.user.is_superuser:
        if request.user.username == "sklad":
            orders = Order.objects.filter(kimga="2")
            orders_1 = orders.filter(status='1')
            orders_2 = orders.filter(status='2')
            orders_3 = orders.filter(status='3')

            today_orders = orders.filter(created_at__date=today)
            today_orders_1 = today_orders.filter(status='1')
            today_orders_2 = today_orders.filter(status='2')

            users = User.objects.all()
        else:
            orders = Order.objects.filter(Q(kimga="1") | Q(kimga=None))
            orders_1 = orders.filter(status='1')
            orders_2 = orders.filter(status='2')
            orders_3 = orders.filter(status='3')

            today_orders = orders.filter(created_at__date=today)
            today_orders_1 = today_orders.filter(status='1')
            today_orders_2 = today_orders.filter(status='2')

            users = User.objects.all()

        admin_ctx = {
            'site_settings': site_settings,
            'orders': orders,
            'top_orders': orders[:10],
            'orders_1': orders_1,
            'orders_2': orders_2,
            'orders_3': orders_3,
            'today_orders': today_orders,
            'today_orders_1': today_orders_1,
            'today_orders_2': today_orders_2,
            'users': users,
        }

        return render(request, 'admin-home.html', admin_ctx)

    elif request.user.is_staff:
        kategoriya = get_object_or_404(Kategoriya, id=1)
        maxsulotlar = Maxsulot.objects.filter(Q(kategoriya=kategoriya) | Q(kategoriya__isnull=True))
        cart_items = CartItems.objects.filter(foydalanuvchi=request.user)
        cart_item_count = cart_items.count()
        order_id = (Order.objects.first().id + 1) if Order.objects.first() else 1
        user_ctx = {
            'site_settings': site_settings,
            'maxsulotlar': maxsulotlar,
            'order_id': order_id,
            'cart_items': cart_items,
            'cart_item_count': cart_item_count,
        }

        return render(request, 'user-home.html', user_ctx)

    else:
        return redirect('login_page')


@login_required(login_url='login_page')
def user_sklad(request):
    if request.user.is_staff:
        site_settings = SiteSettings.objects.last()
        kategoriya = get_object_or_404(Kategoriya, pk=2)
        maxsulotlar = Maxsulot.objects.filter(kategoriya=kategoriya)
        cart_items = CartItems.objects.filter(foydalanuvchi=request.user)
        cart_item_count = cart_items.count()
        order_id = (Order.objects.first().id + 1) if Order.objects.first() else 1

        user_ctx = {
            'site_settings': site_settings,
            'maxsulotlar': maxsulotlar,
            'order_id': order_id,
            'cart_items': cart_items,
            'cart_item_count': cart_item_count,
        }

        return render(request, 'user-sklad.html', user_ctx)

    else:
        return redirect('home_page')


@login_required(login_url='login_page')
def superadmin_product_page(request):
    if request.user.is_superuser:
        maxsulotlar = Maxsulot.objects.all()

        user_ctx = {
            'maxsulotlar': maxsulotlar,
        }

        return render(request, 'user-home.html', user_ctx)

    else:
        return redirect('home_page')


@login_required(login_url='login_page')
def profile_page(request):
    if request.user.is_superuser:
        return redirect('home_page')
    elif request.user.is_staff:
        site_settings = SiteSettings.objects.last()
        cart_items = CartItems.objects.filter(foydalanuvchi=request.user)
        cart_item_count = cart_items.count()
        order_id = (Order.objects.first().id + 1) if Order.objects.first() else 1
        user_orders = Order.objects.filter(foydalanuvchi=request.user)

        user_orders_1 = user_orders.filter(status='1')
        user_orders_2 = user_orders.filter(status='2')
        user_orders_3 = user_orders.filter(status='3')

        # Pagination logic for all orders
        page_number = request.GET.get('page')
        paginator = Paginator(user_orders, 10)
        page_obj = paginator.get_page(page_number)

        # Pagination logic for status '1'
        page_number_1 = request.GET.get('page_1')
        paginator_1 = Paginator(user_orders_1, 10)
        page_obj_1 = paginator_1.get_page(page_number_1)

        # Pagination logic for status '2'
        page_number_2 = request.GET.get('page_2')
        paginator_2 = Paginator(user_orders_2, 10)
        page_obj_2 = paginator_2.get_page(page_number_2)

        # Pagination logic for status '3'
        page_number_3 = request.GET.get('page_3')
        paginator_3 = Paginator(user_orders_3, 10)
        page_obj_3 = paginator_3.get_page(page_number_3)

        user_ctx = {
            'site_settings': site_settings,
            'order_id': order_id,
            'cart_items': cart_items,
            'cart_item_count': cart_item_count,
            'user_orders': page_obj,
            'user_orders_1': page_obj_1,
            'user_orders_2': page_obj_2,
            'user_orders_3': page_obj_3,
        }

        return render(request, 'user-profile.html', user_ctx)


# Cart ---------------------------------------------------------------------------

# Add to cart
@login_required(login_url='login_page')
def add_to_cart(request, product_id):
    if request.method == "POST":
        try:
            data = json.loads(request.body)
            quantity = int(data.get("qty", 1))

            product = get_object_or_404(Maxsulot, id=product_id)
            cart_item, created = CartItems.objects.get_or_create(
                maxsulot=product,
                foydalanuvchi=request.user
            )

            if not created:
                return JsonResponse({"success": False, "message": "Mahsulot savatda mavjud!"})

            cart_item.soni = quantity
            cart_item.save()

            return JsonResponse({"success": True, "message": "Mahsulot savatga qo'shildi!"})
        except Exception as e:
            return JsonResponse({"success": False, "message": f"Xatolik yuz berdi: {str(e)}"})

    return JsonResponse({"success": False, "message": "Noto'g'ri so'rov usuli."})


# Update cart
@csrf_exempt  # Remove in production and use CSRF properly
@login_required
def update_cart_quantity(request):
    if request.method == "POST":
        print(f"Ishladi")
        try:
            # Parse JSON body
            data = json.loads(request.body)
            product_id = data.get("product_id")
            new_quantity = data.get("new_quantity")

            if not product_id or new_quantity is None:
                return JsonResponse({"success": False, "message": "Yaroqsiz ma’lumotlar"})

            cart_item = CartItems.objects.get(maxsulot_id=product_id, foydalanuvchi=request.user)
            cart_item.soni = int(new_quantity)
            cart_item.save()

            return JsonResponse({"success": True, "message": "Soni muvaffaqiyatli yangilandi"})
        except CartItems.DoesNotExist:
            return JsonResponse({"success": False, "message": "Mahsulot savatda mavjud emas"})
        except json.JSONDecodeError:
            return JsonResponse({"success": False, "message": "Yaroqsiz ma’lumotlar"})
        except Exception as e:
            return JsonResponse({"success": False, "message": f"Xatolik: {str(e)}"})

    return JsonResponse({"success": False, "message": "Noto'g'ri so'rov usuli."})


# Remove from cart
@login_required(login_url='login_page')
def remove_cart_item(request, item_id):
    if request.method == "POST":
        cart_item = get_object_or_404(CartItems, id=item_id)
        cart_item.delete()
        return JsonResponse({"success": True, "message": "Item removed successfully."})
    return JsonResponse({"success": False, "message": "Invalid request method."})


# Remove all cart
@login_required(login_url='login_page')
def remove_all_cart(request):
    if request.method == "POST":
        CartItems.objects.filter(foydalanuvchi=request.user).delete()

        return JsonResponse({"success": True, "message": "Savatcha muvaffaqiyatli tozalandi!"})
    return JsonResponse({"success": False, "message": "Xatolik yuz berdi."})


# Order --------------------------------------------------------------------------
@login_required(login_url='login_page')
def order_page(request):
    site_settings = SiteSettings.objects.last()
    maxsulotlar = Maxsulot.objects.all()
    cart_items = CartItems.objects.filter(foydalanuvchi=request.user)
    cart_item_count = cart_items.count()
    order_id = (Order.objects.first().id + 1) if Order.objects.first() else 1

    user_ctx = {
        'site_settings': site_settings,
        'maxsulotlar': maxsulotlar,
        'order_id': order_id,
        'cart_items': cart_items,
        'cart_item_count': cart_item_count,
    }

    if request.method == "POST":
        if cart_items.exists():
            order_instance = Order.objects.create(
                foydalanuvchi=request.user,
                jami_maxsulot=0,
                status='1',
                qoshimcha_rasm=request.FILES.get('qoshimchaRasm', None),
                qoshimcha_matn=request.POST.get('qoshimchaMatn', None),
                kimga=request.POST.get('kimga', None)
            )
            k = 0
            for item in cart_items:
                maxsulot = OrderItems.objects.create(
                    maxsulot=item.maxsulot,
                    soni=item.soni,
                    foydalanuvchi=item.foydalanuvchi,
                )
                item.delete()
                k += maxsulot.soni
                order_instance.maxsulotlar.add(maxsulot)

            order_instance.jami_maxsulot = k
            order_instance.save()
            user_ctx['order'] = order_instance
        else:
            return redirect('home_page')

        return render(request, 'order-success.html', user_ctx)

    return render(request, 'order-success.html', user_ctx)


@login_required(login_url='login_page')
def order_detail_page(request, pk):
    if request.user.is_superuser:
        return redirect('home_page')
    elif request.user.is_staff:
        order = get_object_or_404(Order, id=pk)
        site_settings = SiteSettings.objects.last()
        cart_items = CartItems.objects.filter(foydalanuvchi=request.user)
        cart_item_count = cart_items.count()
        order_id = (Order.objects.first().id + 1) if Order.objects.first() else 1

        user_ctx = {
            'site_settings': site_settings,
            'order_id': order_id,
            'cart_items': cart_items,
            'cart_item_count': cart_item_count,
            'order': order,
        }

        return render(request, 'order-detail.html', user_ctx)


@login_required(login_url='login_page')
def superadmin_all_orders_page(request):
    if request.user.is_superuser:
        site_settings = SiteSettings.objects.last()

        if request.user.username == "sklad":
            all_orders = Order.objects.filter(kimga="2")
        else:
            all_orders = Order.objects.filter(Q(kimga="1") | Q(kimga=None))
        orders = all_orders.filter(status='1')  # Only orders with status '1'
        orders_1_count = all_orders.filter(status='1').count()
        orders_2_count = all_orders.filter(status='2').count()
        orders_3_count = all_orders.filter(status='3').count()
        admin_ctx = {
            'site_settings': site_settings,
            'orders': orders,
            'orders_1': orders_1_count,
            'orders_2': orders_2_count,
            'orders_3': orders_3_count,
        }

        return render(request, 'admin-all-orders.html', admin_ctx)

    else:
        return redirect('home_page')


@login_required(login_url='login_page')
def superadmin_orders_1_page(request):
    if request.user.is_superuser:
        site_settings = SiteSettings.objects.last()

        # Retrieve all relevant orders based on `kimga` and `username`
        if request.user.username == "sklad":
            all_orders = Order.objects.filter(kimga="2")
        else:
            all_orders = Order.objects.filter(Q(kimga="1") | Q(kimga=None))

        # Filter for each status
        orders = all_orders.filter(status='1')  # Only orders with status '1'
        orders_1_count = all_orders.filter(status='1').count()
        orders_2_count = all_orders.filter(status='2').count()
        orders_3_count = all_orders.filter(status='3').count()

        paginator = Paginator(orders, 10)  # Show 10 orders per page
        page_number = request.GET.get('page')
        page_obj = paginator.get_page(page_number)
        admin_ctx = {
            'site_settings': site_settings,
            'orders': page_obj,
            'orders_1': orders_1_count,
            'orders_2': orders_2_count,
            'orders_3': orders_3_count,
        }

        return render(request, 'admin-all-orders.html', admin_ctx)
    else:
        return redirect('home_page')


@login_required(login_url='login_page')
def superadmin_orders_2_page(request):
    if request.user.is_superuser:
        site_settings = SiteSettings.objects.last()

        # Retrieve all relevant orders based on `kimga` and `username`
        if request.user.username == "sklad":
            all_orders = Order.objects.filter(kimga="2")
        else:
            all_orders = Order.objects.filter(Q(kimga="1") | Q(kimga=None))

        # Filter for each status
        orders = all_orders.filter(status='2')  # Only orders with status '2'
        orders_1_count = all_orders.filter(status='1').count()
        orders_2_count = all_orders.filter(status='2').count()
        orders_3_count = all_orders.filter(status='3').count()

        # Pagination logic
        paginator = Paginator(orders, 10)  # Show 10 orders per page
        page_number = request.GET.get('page')
        page_obj = paginator.get_page(page_number)

        admin_ctx = {
            'site_settings': site_settings,
            'orders': page_obj,  # Pass paginated orders
            'orders_1': orders_1_count,
            'orders_2': orders_2_count,
            'orders_3': orders_3_count,
        }

        return render(request, 'admin-all-orders.html', admin_ctx)
    else:
        return redirect('home_page')


@login_required(login_url='login_page')
def superadmin_orders_3_page(request):
    if request.user.is_superuser:
        site_settings = SiteSettings.objects.last()

        # Retrieve all relevant orders based on `kimga` and `username`
        if request.user.username == "sklad":
            all_orders = Order.objects.filter(kimga="2")
        else:
            all_orders = Order.objects.filter(Q(kimga="1") | Q(kimga=None))

        # Filter for each status
        orders = all_orders.filter(status='3')  # Only orders with status '3'
        orders_1_count = all_orders.filter(status='1').count()
        orders_2_count = all_orders.filter(status='2').count()
        orders_3_count = all_orders.filter(status='3').count()
        paginator = Paginator(orders, 10)  # Show 10 orders per page
        page_number = request.GET.get('page')
        page_obj = paginator.get_page(page_number)
        admin_ctx = {
            'site_settings': site_settings,
            'orders': page_obj,
            'orders_1': orders_1_count,
            'orders_2': orders_2_count,
            'orders_3': orders_3_count,
        }

        return render(request, 'admin-all-orders.html', admin_ctx)
    else:
        return redirect('home_page')


@login_required(login_url='login_page')
def superadmin_edit_order_page(request, pk):
    if request.user.is_superuser:
        order = get_object_or_404(Order, id=pk)

        if request.method == "POST":
            if 'sabab' in request.POST:
                order.status = '3'
                order.bekor_qilish_sababi = request.POST.get('sabab')
                order.save()
            elif 'parol' in request.POST:
                parol_input = request.POST.get('parol')
                parol = AdminParol.objects.last()
                if parol and int(parol_input) == int(parol.parol):
                    order.status = '2'
                    order.save()

        site_settings = SiteSettings.objects.last()
        orders_1_count = Order.objects.filter(status='1').count()
        orders_2_count = Order.objects.filter(status='2').count()
        orders_3_count = Order.objects.filter(status='3').count()

        admin_ctx = {
            'site_settings': site_settings,
            'order': order,
            "orders_1": orders_1_count,
            "orders_2": orders_2_count,
            "orders_3": orders_3_count
        }

        return render(request, 'admin-order-edit.html', admin_ctx)

    else:
        return redirect('home_page')


@login_required(login_url='login_page')
def superadmin_order_status_2(request, pk):
    if request.user.is_superuser:
        order = get_object_or_404(Order, id=pk)
        order.status = '2'
        order.save()
        return redirect('superadmin_edit_order_page', pk=pk)
    else:
        return redirect('home_page')
